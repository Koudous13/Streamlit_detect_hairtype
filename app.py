import streamlit as st
import tensorflow as tf
import numpy as np
from PIL import Image
import plotly.graph_objects as go
from streamlit_webrtc import webrtc_streamer, VideoTransformerBase
import cv2

# Cache pour le chargement du mod√®le
@st.cache_resource
def load_model():
    model_path = "bestyYYmodelhair/"
    return tf.saved_model.load(model_path)

# Charger le mod√®le une seule fois
model = load_model()

# Mapping des types de cheveux et des suggestions
hair_suggestions = {
    "Cheveux Boucl√©s": '''
    Caract√©ristiques : La densit√© et le volume naturels des cheveux boucl√©s offrent une base id√©ale pour des tresses protectrices qui subliment les boucles.

    Recommandations de coiffures tress√©es :

    Vanilles (Twists) : Parfaites pour prot√©ger et d√©finir les boucles, tout en apportant une touche chic et naturelle.

    Box Braids avec extensions : Un style protecteur embl√©matique qui combine √©l√©gance et polyvalence.

    Tresses coll√©es avec rajouts : Id√©ales pour contr√¥ler le volume tout en offrant un look sophistiqu√©. 
     
    D√©couvrez nos formations pour entretenir vos cheveux ici : [Formations Tresses](https://ndeyecoiffure.fr/formations-tresses).  
    ''',
    "Cheveux Raides": '''
    Caract√©ristiques : Naturellement lisses et brillants, les cheveux raides se pr√™tent √† des tresses √©l√©gantes qui ajoutent du relief et de la sophistication.

    Recommandations de coiffures tress√©es :

    Tresse fran√ßaise classique : Une coiffure intemporelle et raffin√©e qui sublime la fluidit√© des cheveux raides.

    Box Braids fines avec extensions : Id√©ales pour ajouter de la texture et jouer avec des styles audacieux.
    
    Tresse Ateba : Une touche artistique et color√©e pour personnaliser votre look.  
    
    Acc√©dez √† nos conseils d'entretien ici : [Formations Tresses](https://ndeyecoiffure.fr/formations-tresses).  
    ''',
    "Cheveux Souples ou Ondul√©s": '''
    Caract√©ristiques : Avec leur ondulation naturelle en "S", les cheveux ondul√©s donnent du caract√®re aux tresses et permettent de cr√©er des styles boh√®mes et d√©contract√©s.

    Recommandations de coiffures tress√©es :

    Bohemian Braids : Ces tresses rehaussent les ondulations naturelles gr√¢ce √† des m√®ches libres qui apportent une touche romantique.

    Butterfly Braids : Volumineuses et spectaculaires, elles jouent avec la texture pour un look audacieux.

    Fulani Braids : Un m√©lange de tradition et de modernit√©, enrichies d‚Äôaccessoires pour accentuer votre style.
      
    D√©couvrez plus de conseils sur : [Formations Tresses](https://ndeyecoiffure.fr/formations-tresses).  
    ''',
    "Dreadlocks": '''
    Les dreadlocks requi√®rent un entretien sp√©cifique pour rester saines et brillantes.  
    * Nettoyez-les r√©guli√®rement avec un shampoing doux.  
    * Hydratez vos racines pour √©viter les d√©mangeaisons.  
    D√©couvrez nos formations ici : [Formations Tresses](https://ndeyecoiffure.fr/formations-tresses).  
    ''',
    "Cheveux Cr√©pus": '''
    Caract√©ristiques : Les cheveux cr√©pus, avec leur structure serr√©e et volumineuse, sont parfaits pour des coiffures tress√©es durables qui c√©l√®brent leur texture unique.

    Recommandations de coiffures tress√©es :

    Tresses Coll√©es Simples : Une coiffure minimaliste et √©l√©gante qui prot√®ge efficacement les cheveux.

    Box Braids √©paisses : Une option incontournable pour un style audacieux et une protection optimale.

    Vanilles √©paisses : Simples √† entretenir, elles mettent en valeur la richesse des cheveux cr√©pus tout en maintenant leur hydratation. 
    Retrouvez nos conseils ici : [Formations Tresses](https://ndeyecoiffure.fr/formations-tresses).  
    '''
}

hair_types = list(hair_suggestions.keys())

# Fonction pour pr√©dire le type de cheveux
def predict_hair_type(image):
    # Pr√©traiter l'image pour le mod√®le
    image = image.resize((224, 224))
    img_array = np.expand_dims(image, axis=0).astype(np.float32)

    # Pr√©diction avec le mod√®le
    predict_fn = model.signatures["serving_default"]
    predictions = predict_fn(tf.constant(img_array))
    probabilities = predictions["dense_10"].numpy()[0]
    predicted_index = np.argmax(probabilities)
    return hair_types[predicted_index], probabilities[predicted_index] * 100



# Interface Streamlit
st.title("‚ú® Analysez vos Cheveux ‚ú®")

# Affichage des 4 images fixes
st.subheader("PRENEZ DES PHOTOS CLAIRES :")
col1, col2 = st.columns(2)

# Images existantes
photos = ["00.jpg", "01.jpg", "02.jpg", "03.jpg"]

with col1:
    st.image(photos[0], caption="Photo 1", use_container_width=True)
    st.image(photos[1], caption="Photo 3", use_container_width=True)

with col2:
    st.image(photos[2], caption="Photo 2", use_container_width=True)
    st.image(photos[3], caption="Photo 4", use_container_width=True)

# Section pour t√©l√©charger ou capturer une image
st.subheader("COMMENCEZ EN PRENANT UNE PHOTO :")
image_data = None


# Test de la cam√©ra
cap = cv2.VideoCapture(0)  # Index 0 pour la cam√©ra par d√©faut

if not cap.isOpened():
    print("‚ö†Ô∏è Impossible d'acc√©der √† la cam√©ra. V√©rifiez si elle est connect√©e et fonctionnelle.")
else:
    print("üé• La cam√©ra fonctionne ! Appuyez sur 'Q' pour quitter.")

    while True:
        ret, frame = cap.read()
        if not ret:
            print("‚ö†Ô∏è √âchec de la lecture du flux vid√©o.")
            break

        cv2.imshow("Flux vid√©o", frame)

        # Quitter avec la touche 'Q'
        if cv2.waitKey(1) & 0xFF == ord('q'):
            break

cap.release()
cv2.destroyAllWindows()


# Option pour t√©l√©charger une image
uploaded_file = st.file_uploader("Importer une photo ou capturer via votre webcam", type=["jpg", "jpeg"], accept_multiple_files=False, label_visibility="visible")

#uploaded_file = st.file_uploader("Ou t√©l√©chargez une photo", type=["jpg", "jpeg"])

if uploaded_file is not None:
    image_data = Image.open(uploaded_file)

# Si une image est disponible
if image_data:
    # Pr√©dire le type de cheveux
    hair_type, confidence = predict_hair_type(image_data)

    # Layout avec image et graphique c√¥te √† c√¥te
    col1, col2 = st.columns(2)

    # Afficher l'image t√©l√©charg√©e ou captur√©e
    with col1:
        st.image(image_data, caption="Image analys√©e", use_container_width=True)

    # Cr√©er un graphique avec Plotly
    with col2:
        fig = go.Figure(go.Indicator(
            mode="gauge+number",
            value=confidence,
            title={"text": "Confiance (%)"},
            gauge={"axis": {"range": [0, 100]},
                   "bar": {"color": "darkblue"}}
        ))
        fig.update_layout(height=300, width=300)
        st.plotly_chart(fig, use_container_width=True)

    # Afficher le type de cheveux et les suggestions
    st.subheader(f"Type de Cheveux : {hair_type}")
    st.write(hair_suggestions[hair_type])
else:
    st.info("Veuillez importer ou capturer une photo pour commencer l'analyse.")
